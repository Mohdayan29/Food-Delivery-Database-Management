USE GRAB3;

DELIMITER // 
CREATE PROCEDURE UPDATE_STATUS(IN SS INT, IN ID_ORD CHAR(5)) 
BEGIN 
	UPDATE ORDERS SET ID_STATUSS = SS WHERE ID_ORDER= ID_ORD; 
    IF SS = '4' THEN UPDATE ORDERS SET TAKEN_TIME = NOW() WHERE ID_ORDER = ID_ORD;
    END IF; 
END;// 
 
DELIMITER ; 
 
-- CALL UPDATE_STATUS(5, 'OD02'); 
 
 
DELIMITER // 
CREATE PROCEDURE POP_MESSAGE() 
BEGIN 
	SELECT MESSAGE FROM MESSAGES 
    ORDER BY ID_MESS DESC 
    LIMIT 1; 
END;// 
 
DELIMITER ; 


-- CALCULATE LOCATION
DELIMITER //
CREATE PROCEDURE LAT_LO(IN LOCATION VARCHAR(20), OUT LAT FLOAT(20), OUT LO FLOAT(20)) 
BEGIN 
	IF LOCATION = '11'  
		THEN 
	SET LAT = 21.01813474913302,  
			LO = 105.8299470944449; 
	ELSEIF LOCATION = '1' 
		THEN 
	SET LAT = 20.95535050362483, 
			LO = 105.75653699205726; 
	ELSEIF LOCATION = '2' 
		THEN 
	SET LAT = 21.00281619368402, 
			LO = 105.77067155358813; 
	ELSEIF LOCATION = '3' 
		THEN 
	SET LAT = 21.072535965071523, 
			LO = 105.77049989243397; 
	ELSEIF LOCATION = '4' 
		THEN 
	SET LAT = 20.996298847731342, 
			LO = 105.80989559218611; 
	ELSEIF LOCATION = '5' 
		THEN 
	SET LAT = 21.028120645178024, 
			LO = 105.85135605366689; 
	ELSEIF LOCATION = '6' 
		THEN 
	SET LAT = 20.98321398937924, 
			LO = 105.86362523076868; 
	ELSEIF LOCATION = '7' 
		THEN 
	SET LAT = 21.00825226619837, 
			LO = 105.86040690809416; 
	ELSEIF LOCATION = '8' 
		THEN 
	SET LAT = 21.054379308933587, 
			LO = 105.88849613099748; 
	ELSEIF LOCATION = '9' 
		THEN 
	SET LAT = 21.08047681708801, 
			LO = 105.81854511521607; 
		ELSEIF LOCATION = '12' 
		THEN 
	SET LAT = 21.033938138116298, 
			LO = 105.81474007644158;     
		 ELSEIF LOCATION = '10' 
		THEN 
	SET LAT = 21.036233214458484, 
			LO = 105.79092535369351;        
END IF; 
END;//
 
DELIMITER ;

-- GET_SHIP_COST
DELIMITER //
CREATE PROCEDURE GET_SHIP_COST(IN LOC1 VARCHAR(20), IN LOC2 VARCHAR(20), OUT DIS FLOAT) 
BEGIN 
DECLARE LAT1 FLOAT; 
    DECLARE LAT2 FLOAT; 
	DECLARE LO1 FLOAT; 
    DECLARE LO2 FLOAT; 
    DECLARE R FLOAT(10); 
    DECLARE DLAT FLOAT(20); 
    DECLARE DLON FLOAT(20); 
    DECLARE A FLOAT(20); 
    DECLARE C FLOAT(20); 
    DECLARE D FLOAT(20); 
	CALL LAT_LO(LOC1, @LAT, @LO); 
		SELECT @LAT, @LO INTO LAT1, LO1; 
    CALL LAT_LO(LOC2, @LAT, @LO); 
		SELECT @LAT, @LO INTO LAT2, LO2; 
    SET R = 6373.0; 
    SET LAT1 = LAT1 * 0.0174532925; 
    SET LO1 = LO1 * 0.0174532925; 
    SET LAT2 = LAT2 * 0.0174532925; 
    SET LO2 = LO2 * 0.0174532925; 
    SET DLAT = LAT2 - LAT1; 
    SET DLON = LO2 - LO1; 
    SET A = POWER(SIN(DLAT/2),2) + COS(LAT1) * COS(LAT2) * POWER(SIN(DLON/2),2); 
    SET C = 2 * ATAN2(SQRT(A), SQRT(1-A)); 
    SET D = R * C * 8000; 
    SELECT FLOOR(D) INTO DIS; 
END;//

DELIMITER ;

DELIMITER //
CREATE PROCEDURE AGE_GROUP_FOOD(IN L INT, IN T INT, OUT FOOD VARCHAR(100))
BEGIN
	SELECT GROUP_CONCAT(P.FOODNAME SEPARATOR ', ') INTO FOOD FROM (SELECT FOODS.FNAME AS FOODNAME, COUNT(ORDER_DETAILS.ID_ORDER) AS QUANTITY 
	FROM USERS JOIN CUSTOMERS ON USERS.ID_USER = CUSTOMERS.ID_USER 
		JOIN ORDERS ON CUSTOMERS.ID_CUS = ORDERS.ID_CUS 
		JOIN ORDER_DETAILS ON ORDER_DETAILS.ID_ORDER = ORDERS.ID_ORDER 
		JOIN FOODS ON ORDER_DETAILS.ID_FOOD = FOODS.ID_FOOD
	WHERE (YEAR(NOW()) - YEAR(USERS.BIRTHDATE)) > L
	AND (YEAR(NOW()) - YEAR(USERS.BIRTHDATE)) < T
	GROUP BY FOODS.FNAME
	ORDER BY QUANTITY DESC
	LIMIT 5) AS P;
END;//

CALL AGE_GROUP_FOOD(18, 25, @FOOD);
SELECT @FOOD  AS 'FAVORITE FOOD';

DELIMITER //
CREATE PROCEDURE GROUP_AGE_F()
BEGIN
	DECLARE A VARCHAR(100);
    DECLARE B VARCHAR(100);
    DECLARE C VARCHAR(100);
    DECLARE D VARCHAR(100);
	CALL AGE_GROUP_FOOD(0, 20, @FOOD1);
	SELECT @FOOD1 INTO A;
    CALL AGE_GROUP_FOOD(20, 30, @FOOD1);
	SELECT @FOOD1 INTO B;
    CALL AGE_GROUP_FOOD(30, 40, @FOOD1);
	SELECT @FOOD1 INTO C;
    CALL AGE_GROUP_FOOD(40, 100, @FOOD1);
	SELECT @FOOD1 INTO D;
    SELECT A AS '< 20', B AS '20 - 30', C AS '30 - 40', D AS '> 40';
END; //



DELIMITER //
CREATE PROCEDURE AGE_GROUP_SPENDING(IN L INT, IN T INT, OUT SPEND INT)
BEGIN
	SELECT SUM(P.TOTAL) INTO SPEND FROM (SELECT PAYMENTS.ID_ORDER, SUM(TOTAL_PRICE) AS TOTAL
	FROM USERS JOIN CUSTOMERS ON USERS.ID_USER = CUSTOMERS.ID_USER 
		JOIN ORDERS ON CUSTOMERS.ID_CUS = ORDERS.ID_CUS 
		JOIN PAYMENTS ON ORDERS.ID_ORDER = PAYMENTS.ID_ORDER
	WHERE (YEAR(NOW()) - YEAR(USERS.BIRTHDATE)) > L
	AND (YEAR(NOW()) - YEAR(USERS.BIRTHDATE)) < T
	GROUP BY PAYMENTS.ID_ORDER) AS P;
END; //



DELIMITER //
CREATE PROCEDURE GROUP_AGE_S()
BEGIN
	DECLARE A VARCHAR(100);
    DECLARE B VARCHAR(100);
    DECLARE C VARCHAR(100);
    DECLARE D VARCHAR(100);
	CALL AGE_GROUP_SPENDING(0, 20, @SPEND);
	SELECT @SPEND INTO A;
    CALL AGE_GROUP_SPENDING(20, 30, @SPEND);
	SELECT @SPEND INTO B;
    CALL AGE_GROUP_SPENDING(30, 40, @SPEND);
	SELECT @SPEND INTO C;
    CALL AGE_GROUP_SPENDING(40, 100, @SPEND);
	SELECT @SPEND INTO D;
    SELECT A AS '< 20', B AS '20 - 30', C AS '30 - 40', D AS '> 40';
END; //

 