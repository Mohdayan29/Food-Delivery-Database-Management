USE GRAB3;

-- ADD_SHIP_COST
DELIMITER //  
CREATE TRIGGER ADD_SHIP_COST 
BEFORE INSERT  
ON PAYMENTS  
FOR EACH ROW 
BEGIN 
	DECLARE CUS_LOC INT; 
    DECLARE RES_LOC INT; 
    DECLARE S_COST INT; 

	SELECT ID_LOC_CUS INTO CUS_LOC FROM ORDERS  
    LEFT JOIN PAYMENTS ON ORDERS.ID_ORDER = PAYMENTS.ID_ORDER WHERE ORDERS.ID_ORDER = NEW.ID_ORDER;
     
    SELECT ID_LOCATION INTO RES_LOC FROM ORDERS JOIN RESTAURANTS 
    ON RESTAURANTS.ID_RES = ORDERS.ID_RES WHERE ORDERS.ID_ORDER = NEW.ID_ORDER;
     
    CALL GET_SHIP_COST(CUS_LOC, RES_LOC, @DIS); 
    SELECT @DIS INTO S_COST; 
    SET NEW.SHIP_COST = S_COST; 
END; //

DELIMITER ; 


-- ADD_RES_COST
DELIMITER //
CREATE TRIGGER ADD_RES_COST
BEFORE INSERT
ON PAYMENTS
FOR EACH ROW
BEGIN
	DECLARE RES_PRICE INT;
    
    SELECT SUM(PRICE) INTO RES_PRICE FROM ORDERS 
    JOIN ORDER_DETAILS ON ORDERS.ID_ORDER = ORDER_DETAILS.ID_ORDER 
    WHERE ORDER_DETAILS.ID_ORDER = NEW.ID_ORDER;
    
    SET NEW.RES_COST = RES_PRICE;
END;//
 
 
-- ADD PRICE INTO ORDER_DETAILS 
DELIMITER // 
CREATE TRIGGER ADD_PRICE_OD 
BEFORE INSERT  
ON ORDER_DETAILS 
FOR EACH ROW 
BEGIN 
DECLARE P INT; 
     
    SELECT PRICE INTO P FROM FOODS WHERE NEW.ID_FOOD = FOODS.ID_FOOD; 
     
    SET NEW.PRICE = NEW.QUANTITY * P; 
END; // 
 
DELIMITER ; 
 
 
-- ADD VOUCHERS
DELIMITER //
CREATE TRIGGER ADD_VOUCHER 
BEFORE INSERT ON PAYMENTS 
FOR EACH ROW 
BEGIN 
IF(NEW.PAYMENT_METHOD = 'MOMO') THEN SET NEW.VOUCHER_PM = 'MOMO10'; END IF; 
    IF(NEW.PAYMENT_METHOD ='ZALO') THEN SET NEW.VOUCHER_PM = 'ZALO10'; END IF; 
    IF(NEW.PAYMENT_METHOD = 'AIRPAY') THEN SET NEW.VOUCHER_PM = 'AIRP10'; END IF; 
IF(NEW.PAYMENT_METHOD = 'BANKING') THEN SET NEW.VOUCHER_PM = 'BANK10'; END IF; 
    IF(NEW.PAYMENT_METHOD = 'COD') THEN SET NEW.VOUCHER_PM = NULL; END IF; 
     
    IF(NEW.PAYMENT_METHOD = 'COD') THEN SET NEW.IS_PAID = '0'; 
    ELSE SET NEW.IS_PAID = '1'; 
    END IF; 
END//
 
DELIMITER ; 
 
 
-- UPDATE LOCATION IN ORDERS  
DELIMITER // 
CREATE TRIGGER UPDATE_LOCATION 
BEFORE INSERT ON ORDERS 
FOR EACH ROW 
BEGIN 
DECLARE CS INT; 
     
    SELECT ID_LOCATION INTO CS  
    FROM CUSTOMERS 
    WHERE CUSTOMERS.ID_CUS = NEW.ID_CUS; 
     
    IF(NEW.ID_LOC_CUS IS NULL) 
THEN SET NEW.ID_LOC_CUS = CS; 
END IF; 
     
END;// 
 
DELIMITER ; 
 
 
-- CHECK STOCK LEFT OF EACH FOODS
DELIMITER //  
CREATE TRIGGER STOCK_LEFT 
BEFORE INSERT ON ORDER_DETAILS 
FOR EACH ROW 
BEGIN  
DECLARE QUAN INT; 
    DECLARE SL INT; 
    DECLARE FN CHAR(50); 
       DECLARE P INT; 
    SET QUAN = NEW.QUANTITY; 
     
    SELECT STOCKS INTO SL  
    FROM FOODS  
    WHERE NEW.ID_FOOD = FOODS.ID_FOOD; 
     
    SELECT FNAME INTO FN  
    FROM FOODS 
    WHERE NEW.ID_FOOD = FOODS.ID_FOOD; 
     
     
    IF NEW.QUANTITY > (SELECT STOCKS FROM FOODS WHERE NEW.ID_FOOD = FOODS.ID_FOOD) 
    THEN 
	INSERT INTO MESSAGES(ID_ORDER, MESSAGE) VALUES (NEW.ID_ORDER, CONCAT('Only ', SL, ' ', FN, ' left')); 
        SET NEW.QUANTITY = 0; 
       
	ELSE 
	UPDATE FOODS SET STOCKS = STOCKS - QUAN 
	WHERE NEW.ID_FOOD = FOODS.ID_FOOD; 
 
    END IF; 
  
    SELECT PRICE INTO P FROM FOODS WHERE NEW.ID_FOOD = FOODS.ID_FOOD; 
    SET NEW.PRICE = NEW.QUANTITY * P; 
END// 
 
DELIMITER ;  


-- MAX USE FOR VOUCHERS
DELIMITER //
CREATE TRIGGER UPDATE_MAX_USE
BEFORE INSERT ON PAYMENTS
FOR EACH ROW
BEGIN
    DECLARE USE_LEFT4PM INT;
    DECLARE USE_LEFT4ID INT;
    
    UPDATE VOUCHERS SET MAX_USE = (MAX_USE - 1) WHERE VOUCHERS.ID_VOUCHER = NEW.ID_VOUCHER;
    UPDATE VOUCHERS SET MAX_USE = (MAX_USE - 1) WHERE VOUCHERS.ID_VOUCHER = NEW.VOUCHER_PM;
    
    SELECT MAX_USE INTO USE_LEFT4ID FROM PAYMENTS JOIN VOUCHERS ON PAYMENTS.ID_VOUCHER = VOUCHERS.ID_VOUCHER 
    WHERE VOUCHERS.ID_VOUCHER = NEW.ID_VOUCHER 
    LIMIT 1;
    
    SELECT MAX_USE INTO USE_LEFT4PM FROM PAYMENTS JOIN VOUCHERS ON PAYMENTS.VOUCHER_PM = VOUCHERS.ID_VOUCHER 
    WHERE VOUCHERS.ID_VOUCHER = NEW.VOUCHER_PM
    LIMIT 1;
    IF USE_LEFT4ID <= 0 THEN UPDATE VOUCHERS SET DISCOUNT = 0 WHERE VOUCHERS.ID_VOUCHER = NEW.ID_VOUCHER; END IF;
    IF USE_LEFT4PM <= 0 THEN UPDATE VOUCHERS SET DISCOUNT = 0 WHERE VOUCHERS.ID_VOUCHER = NEW.VOUCHER_PM; END IF;
    IF USE_LEFT4ID <= 0 THEN 
		INSERT INTO MESSAGES(ID_ORDER, MESSAGE) VALUES(NEW.ID_ORDER, CONCAT(NEW.ID_VOUCHER, ' OUT OF VOUCHER'));
    END IF;
    IF USE_LEFT4PM <= 0 THEN 
		INSERT INTO MESSAGES(ID_ORDER, MESSAGE) VALUES(NEW.ID_ORDER, CONCAT(NEW.VOUCHER_PM, ' OUT OF VOUCHER'));
    END IF;
END;//
DELIMITER;


-- ADD TOTAL PRICE INTO PAYMENTS
DELIMITER //
CREATE TRIGGER TOTAL_PRICE
BEFORE INSERT ON PAYMENTS
FOR EACH ROW
BEGIN
	DECLARE DIS4ID INT;
    DECLARE DIS4PM INT;
    DECLARE PRICE INT;
    IF NEW.ID_VOUCHER IS NULL THEN SET DIS4ID = 0;
    ELSE 
		SELECT DISCOUNT INTO DIS4ID FROM PAYMENTS 
        RIGHT JOIN VOUCHERS ON VOUCHERS.ID_VOUCHER = PAYMENTS.ID_VOUCHER 
        WHERE VOUCHERS.ID_VOUCHER = NEW.ID_VOUCHER
        LIMIT 1;
    END IF;
    IF NEW.VOUCHER_PM IS NULL THEN SET DIS4PM = 0;
    ELSE
		SELECT DISCOUNT INTO DIS4PM FROM PAYMENTS 
        RIGHT JOIN VOUCHERS ON VOUCHERS.ID_VOUCHER = PAYMENTS.ID_VOUCHER 
        WHERE VOUCHERS.ID_VOUCHER = NEW.VOUCHER_PM
        LIMIT 1;
    END IF;
    SET PRICE = NEW.SHIP_COST + NEW.RES_COST * (1 - DIS4ID - DIS4PM);
	SET NEW.TOTAL_PRICE = PRICE;
END;//

DELIMITER ;

-- CANCEL ORDERS
DELIMITER //
CREATE TRIGGER UPDATE_CANCEL
BEFORE UPDATE ON ORDERS
FOR EACH ROW
BEGIN
	IF NEW.ID_STATUSS = 5 THEN 
		IF OLD.ID_STATUSS = 1 THEN 
			UPDATE PAYMENTS SET SHIP_COST = 0, RES_COST = 0, TOTAL_PRICE = 0 WHERE PAYMENTS.ID_ORDER = OLD.ID_ORDER;
		ELSE
			INSERT INTO MESSAGES(ID_ORDER, MESSAGE) VALUES(OLD.ID_ORDER, 'You cannot cancel this order!');
            SET NEW.ID_STATUSS = OLD.ID_STATUSS;
		END IF;
	END IF;
END; //

DELIMITER ;


-- ADD_DRIVER_RES_INTO_RATINGS
DELIMITER //
CREATE TRIGGER UPDATE_DRIVER_RES
BEFORE INSERT ON RATINGS
FOR EACH ROW
BEGIN
	DECLARE DVR CHAR(10);
    DECLARE RES CHAR(5);
    
    SELECT ID_DRIVER, ID_RES INTO DVR, RES FROM ORDERS
    WHERE ORDERS.ID_ORDER = NEW.ID_ORDER;
    
    SET NEW.ID_DRIVER = DVR;
    SET NEW.ID_RES = RES;
END;//

DELIMITER ;


-- ADD_STAR_DRIVER_RES
DELIMITER //
CREATE TRIGGER ADD_STAR
AFTER INSERT ON RATINGS
FOR EACH ROW
BEGIN
	DECLARE SS FLOAT;
    DECLARE RR FLOAT;
	
	SELECT AVG(STAR_DRIVER) INTO SS 
	FROM RATINGS 
	WHERE RATINGS.ID_DRIVER = NEW.ID_DRIVER;
    
    SELECT AVG(STAR_RES) INTO RR 
	FROM RATINGS 
	WHERE RATINGS.ID_RES = NEW.ID_RES;

	UPDATE DRIVERS 
	SET STAR = SS
	WHERE DRIVERS.ID_DRIVER = NEW.ID_DRIVER;
    
    UPDATE RESTAURANTS
	SET STAR = RR
	WHERE RESTAURANTS.ID_RES = NEW.ID_RES;
END;//
	
DELIMITER ;


-- UPDATE CHANGES INTO AUDIT
DELIMITER //
CREATE TRIGGER UPDATE_FOODS
BEFORE UPDATE
ON FOODS
FOR EACH ROW
BEGIN
	IF (NEW.FNAME != OLD.FNAME) THEN INSERT INTO AUDIT(ID, CHANGED_TABLE, FIELD1, OLD_DATA, NEW_DATA, ACTION_TIME) VALUES (OLD.ID_FOOD, 'FOOD', 'UPDATE FOOD NAME', OLD.FNAME, NEW.FNAME, NOW()); END IF;
	IF (NEW.PRICE != OLD.PRICE) THEN INSERT INTO AUDIT(ID, CHANGED_TABLE, FIELD1, OLD_DATA, NEW_DATA, ACTION_TIME) VALUES (OLD.ID_FOOD, 'FOOD', 'UPDATE FOOD PRICE', OLD.PRICE, NEW.PRICE, NOW()); END IF;
	IF (NEW.STOCKS != OLD.STOCKS) THEN INSERT INTO AUDIT(ID, CHANGED_TABLE, FIELD1, OLD_DATA, NEW_DATA, ACTION_TIME) VALUES (OLD.ID_FOOD, 'FOOD', 'UPDATE FOOD STOCK', OLD.STOCKS, NEW.STOCKS, NOW()); END IF;
END;//
DELIMITER ;


DELIMITER //
CREATE TRIGGER DEL_FOODS
BEFORE DELETE
ON FOODS
FOR EACH ROW
BEGIN
	INSERT INTO AUDIT(ID, CHANGED_TABLE, FIELD1, OLD_DATA, ACTION_TIME) 
    VALUES (OLD.ID_FOOD, 'FOOD', 'DELETE FOOD', OLD.FNAME, NOW());
END;//
DELIMITER ;


DELIMITER //
CREATE TRIGGER UPDATE_AUDIT_PAYMENTS
BEFORE UPDATE
ON PAYMENTS
FOR EACH ROW
BEGIN
	IF (NEW.RES_COST != OLD.RES_COST) THEN INSERT INTO AUDIT(ID, CHANGED_TABLE, FIELD1, OLD_DATA, NEW_DATA, ACTION_TIME) VALUES (OLD.ID_ORDER, 'PAYMENTS', 'UPDATE RES COST', OLD.RES_COST, NEW.RES_COST, NOW()); END IF;
	IF (NEW.SHIP_COST != OLD.SHIP_COST) THEN INSERT INTO AUDIT(ID, CHANGED_TABLE, FIELD1, OLD_DATA, NEW_DATA, ACTION_TIME) VALUES (OLD.ID_ORDER, 'PAYMENTS', 'UPDATE SHIP COST', OLD.SHIP_COST, NEW.SHIP_COST, NOW()); END IF;
	IF (NEW.TOTAL_PRICE != OLD.TOTAL_PRICE) THEN INSERT INTO AUDIT(ID, CHANGED_TABLE, FIELD1, OLD_DATA, NEW_DATA, ACTION_TIME) VALUES (OLD.ID_ORDER, 'PAYMENTS', 'UPDATE TOTAL PRICE', OLD.TOTAL_PRICE, NEW.TOTAL_PRICE, NOW()); END IF;
END;//
DELIMITER ;



DELIMITER //
CREATE TRIGGER UPDATE_CUS
BEFORE UPDATE
ON CUSTOMERS
FOR EACH ROW
BEGIN
	IF (NEW.ID_LOCATION != OLD.ID_LOCATION) 
		THEN INSERT INTO AUDIT(ID, CHANGED_TABLE, FIELD1, OLD_DATA, NEW_DATA, ACTION_TIME) 
		VALUES (OLD.ID_CUS, 'CUSTOMERS', 'UPDATE LOCATION', OLD.ID_LOCATION, NEW.ID_LOCATION, NOW()); 
        END IF;
	IF (NEW.SECURITY_CODE != OLD.SECURITY_CODE) 
		THEN INSERT INTO AUDIT(ID, CHANGED_TABLE, FIELD1, OLD_DATA, NEW_DATA, ACTION_TIME) 
		VALUES (OLD.ID_CUS, 'CUSTOMERS', 'UPDATE SECURITY CODE', OLD.SECURITY_CODE, NEW.SECURITY_CODE, NOW()); 
        END IF;
END;//
DELIMITER ;


DELIMITER //
CREATE TRIGGER UPDATE_RES
BEFORE UPDATE
ON RESTAURANTS
FOR EACH ROW
BEGIN
	IF (NEW.NAME_RES != OLD.NAME_RES) THEN INSERT INTO AUDIT(ID, CHANGED_TABLE, FIELD1, OLD_DATA, NEW_DATA, ACTION_TIME) VALUES (OLD.ID_RES, 'RESTAURANTS', 'UPDATE RES NAME', OLD.NAME_RES, NEW.NAME_RES, NOW()); END IF;
	IF (NEW.DESCRIPTIONS != OLD.DESCRIPTIONS) THEN INSERT INTO AUDIT(ID, CHANGED_TABLE, FIELD1, OLD_DATA, NEW_DATA, ACTION_TIME) VALUES (OLD.ID_RES, 'RESTAURANTS', 'UPDATE DESCRIPTIONS', OLD.DESCRIPTIONS, NEW.DESCRIPTIONS, NOW()); END IF;
	IF (NEW.OPEN_HOUR != OLD.OPEN_HOUR) THEN INSERT INTO AUDIT(ID, CHANGED_TABLE, FIELD1, OLD_DATA, NEW_DATA, ACTION_TIME) VALUES (OLD.ID_RES, 'RESTAURANTS', 'UPDATE OPEN HOUR', OLD.OPEN_HOUR, NEW.OPEN_HOUR, NOW()); END IF;
    IF (NEW.CLOSE_HOUR != OLD.CLOSE_HOUR) THEN INSERT INTO AUDIT(ID, CHANGED_TABLE, FIELD1, OLD_DATA, NEW_DATA, ACTION_TIME) VALUES (OLD.ID_RES, 'RESTAURANTS', 'UPDATE CLOSE HOUR', OLD.CLOSE_HOUR, NEW.CLOSE_HOUR, NOW()); END IF;
    IF (NEW.ID_LOCATION != OLD.ID_LOCATION) THEN INSERT INTO AUDIT(ID, CHANGED_TABLE, FIELD1, OLD_DATA, NEW_DATA, ACTION_TIME) VALUES (OLD.ID_RES, 'RESTAURANTS', 'UPDATE LOCATION', OLD.ID_LOCATION, NEW.ID_LOCATION, NOW()); END IF;
END;//
DELIMITER ;


DELIMITER //
CREATE TRIGGER DEL_RES
BEFORE DELETE
ON RESTAURANTS
FOR EACH ROW
BEGIN
	INSERT INTO AUDIT(ID, CHANGED_TABLE, FIELD1, OLD_DATA, ACTION_TIME) 
    VALUES (OLD.ID_RES, 'RESTAURANTS', 'DELETE RESTAURANTS', OLD.NAME_RES, NOW());
END;//
DELIMITER ;


DELIMITER //
CREATE TRIGGER UPDATE_USERS
BEFORE UPDATE
ON USERS
FOR EACH ROW
BEGIN
	IF (NEW.PHONE != OLD.PHONE) 
    THEN INSERT INTO AUDIT(ID, CHANGED_TABLE, FIELD1, OLD_DATA, NEW_DATA, ACTION_TIME) 
    VALUES (OLD.ID_USER, 'USERS', 'UPDATE PHONE NUMBER', OLD.PHONE, NEW.PHONE, NOW()); 
    END IF;
END;//
DELIMITER ;


